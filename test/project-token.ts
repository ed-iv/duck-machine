import { expect } from "chai";
import { ethers } from "hardhat";

describe("Amazing Duck Machine (Duck ERC-721 Contract)", function () {
  
  it("Can set the vendor to current holder of Vendor token", async () => {
    // - Call to internal 
    expect(false).to.equal(true);
  });

  it("Will remember it's vendor until Vendor token transferred", async () => {
    expect(false).to.equal(true);
  });

  it("Will forget it's vendor on transfer", async () => {
    expect(false).to.equal(true);
  });

  describe("The Shopper", function () {
    it("Can mint collection tokens", async function () {      
      expect(false).to.equal(true);
    });

    it("Can mint custom tokens", async function () {      
      expect(false).to.equal(true);
    });
  });  
  
  // One possibility here is that ChainSaw deploys an ERC-1155 contract 
  // to be used as source of 'Project Tokens'. These project tokens represent
  // ownership of a particular ChainSaw project and can be freely traded.
  //
  // Project tokens are purchased by clients to receive their portion of 
  // revenue generated by the app. Revenue split is dependent on 
  // distribution of Project Tokens.
  // 
  // While not a requirement, a Project Token owner may be referenced 
  // as an auth mechanism to control admin access to application features.
  //
  // A Project Token can have fractional ownership to give each participant
  // a specific share of revenues generated by project.
  //

  describe("The Vendor (Ownership ERC-1155 Token)", function () {
    // Auth
    it("blah", async () => {
      expect(false).to.equal(true);
    });

    // Minting
    it("Can specify mint price for collection mints", async function () {      
      expect(false).to.equal(true);
    });

    it("Can specify mint price for custom mints", async function () {      
      expect(false).to.equal(true);
    });

    // Mint Throttle
    it("Can pause minting of collection tokens", async function () {      
      expect(false).to.equal(true);
    });

    it("Can specify mint price for custom mints", async function () {      
      expect(false).to.equal(true);
    });

    // Content controls
    it("Can accept custom mint submissions", async function () {      
      // How does this work? 
      // 
      // We could suspend minting by having submissions enter
      // into an approval queue and officially mint them post approval.
      //
      // One problem is that storing something in an approval queue 
      // isn't too different from minting them (see below).
      //
      // We could also mint and then burn when rejected. This does 
      // 
      expect(false).to.equal(true);
    });

    it("Can reject custom mint submissions", async function () {      
      // There is an issue here in that even rejected submissions are still 
      // permanently tied to the project. Transparent content control.

      // Interesting record of decisions made for and against certain
      // types of content. Who is the community? Who is in control?
      expect(false).to.equal(true);
    });
  });  



  
});

// TODO - Add tests for storage encoding type stuff in separate file